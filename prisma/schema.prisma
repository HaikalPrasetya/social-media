generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String  @id
  username      String  @unique
  displayName   String
  email         String? @unique
  password      String?
  googleId      String? @unique
  bio           String?
  profilePicUrl String?
  posts         Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions              Session[]
  followers             Follow[]       @relation("Followers")
  followings            Follow[]       @relation("Following")
  likes                 Like[]
  bookmarks             Bookmark[]
  comments              Comment[]
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id])
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id      String @id @default(cuid())
  content String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  updatedAt     DateTime       @updatedAt
  createdAt     DateTime       @default(now())
  attachments   Media[]
  likes         Like[]
  bookmarks     Bookmark[]
  comments      Comment[]
  notifications Notification[]

  @@map("posts")
}

model Comment {
  id      String @id @default(cuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("comments")
}

model Media {
  id   String    @id @default(cuid())
  url  String
  type MediaType

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@map("attachments")
}

enum MediaType {
  VIDEO
  IMAGE
}

model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
